(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{444:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6-4-访问数据的常见模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-访问数据的常见模式"}},[t._v("#")]),t._v(" 6.4 访问数据的常见模式")]),t._v(" "),a("p",[t._v("所有开发人员都需要一些解决方案来将他们的数据连接到他们的模型。这些数据包括普通数据集或众所周知的实验数据集（如MNIST），或企业内完全自定义的专有数据格式。在本节中，我们将回顾tf.data如何帮助简化和维护这些连接。")]),t._v(" "),a("h2",{attrs:{id:"_6-4-1使用csv格式数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-1使用csv格式数据"}},[t._v("#")]),t._v(" 6.4.1使用CSV格式数据")]),t._v(" "),a("p",[t._v("除了使用普通数据集之外，访问数据的最常用方法还包括加载以某种文件格式存储好的数据。数据文件通常以CSV（逗号分隔值）格式存储[101]，因为它的简单性、可读性和广泛的支持。其他格式在存储效率和访问速度方面也有其他优势，但CSV可能被视为数据集的通用语言。在JS社区中，我们通常希望能够方便地从某个HTTP端点流式传输数据。这就是为什么TensorFlow.js为CSV文件中的数据流和操作提供原生支持的原因。")]),t._v(" "),a("p",[t._v("在第6.2.2节中，我们简要描述了如何构建一个由CSV文件支持的tf.data.Dataset。在本节中，我们将深入讨论CSV API，以展示tf.data如何更便捷的使用这些数据源。我们将描述一个示例应用程序，它连接到远程CSV数据集，计算数据集的元素，并为用户提供选择和打印单个示例的功能。使用现在熟悉的命令查看示例：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git clone https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tensorflow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tfjs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("examples"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\ncd tfjs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("examples"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("csv\nyarn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" yarn watch\n")])])]),a("p",[t._v("这将弹出一个网站，指示我们输入托管CSV文件的URL，或使用建议的URL之一，例如“Boston Housing CSV”。在URL输入框下面，提供了执行操作的三个按钮。1） 计算数据集中的行数，2）检索CSV的列名（如果存在），3）访问和打印数据集中的指定示例行。让我们来看看它们是如何工作的，以及tf数据API如何使它们变得非常简单。")]),t._v(" "),a("h6",{attrs:{id:"图6-2-tfjs数据csv示例的web-ui。单击顶部的一个预先设置的csv文件的按钮-或者输入csv的路径。如果使用路径文件-请确保为csv启用cors访问。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图6-2-tfjs数据csv示例的web-ui。单击顶部的一个预先设置的csv文件的按钮-或者输入csv的路径。如果使用路径文件-请确保为csv启用cors访问。"}},[t._v("#")]),t._v(" 图6.2 tfjs数据CSV示例的Web UI。单击顶部的一个预先设置的CSV文件的按钮，或者输入CSV的路径。如果使用路径文件，请确保为CSV启用CORS访问。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/data/6.2.png"),alt:"figure6.2"}}),t._v(" "),a("p",[t._v("使用如下命令从远程CSV创建tfjs数据集非常简单:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("csv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("url使用http://、https://、file://协议，或者是RequestInfo。此调用实际上不会向URL发出任何请求，以检查文件是否存在或是否可访问。在下面的清单6.10中，首先在异步调用myData.forEach（）获取CSV。foreach调用的函数将简单地对数据集中的元素进行字符串化和打印，但我们运用此方法执行其他操作，例如为集合中的每个元素生成UI元素或计算报表的信息。")]),t._v(" "),a("h6",{attrs:{id:"清单6-10在远程csv文件中打印前10条记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-10在远程csv文件中打印前10条记录"}},[t._v("#")]),t._v(" 清单6.10在远程CSV文件中打印前10条记录")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'queryURL'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("csv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" myData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("CSV数据集通常使用第一行作为包含与每列关联的名称的说明。默认情况下，tf.data.csv（）可以使用作为第二个参数传入的csvConfig对象来控制第一行说明。如果列名称不是由CSV文件本身提供的，则可以在构造函数中手动提供，如下所示：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("csv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      hasHeader"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      columnNames"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"firstName"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lastName"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果为CSV数据集手动提供列名配置，则它将优先于从数据文件中读取标题行。默认情况下，数据集将假定第一行是标题行。如果第一行不是标题，则必须手动配置。\n一旦对象CSVDataset存在，就可以使用dataset.columnNames()查询获取列名，其将返回列名的有序字符串列表。columnNames()是专属CSVDataset的，通常不能从从其他源构建的数据集中获得。示例中的“Get column names”按钮实现此API。请求列名会对所提供的URL进行一个fetch调用，以访问和解析第一行，清单6.11为异步调用。")]),t._v(" "),a("h6",{attrs:{id:"清单6-11从csv访问列名-从tfjs-examples-csv-data-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-11从csv访问列名-从tfjs-examples-csv-data-index-js"}},[t._v("#")]),t._v(" 清单6.11从CSV访问列名：从tfjs-examples/CSV data/index.js")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'queryURL'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("csv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" columnNames "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" myData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("columnNames")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("columnNames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Outputs something like ["crim", "zn", "indus", ..., "tax", "ptratio", "lstat"] for Boston Housing.')]),t._v("\n")])])]),a("p",[t._v("在清单6.12中，我们展示了web应用程序如何打印CSV文件的一个选定行。为了满足这个请求，我们将首先使用该Dataset.skip()方法创建一个与原始数据集相同的新数据集，跳过n-1元素。然后，使用 Dataset.take()创建一个以此元素结束的数据集。最后，我们将使用Dataset.toArray() 将数据提取到标准JavaScript数组中。如果一切顺利，我们的请求将生成一个数组，其中正好包含指定位置的元素。")]),t._v(" "),a("h6",{attrs:{id:"清单6-12从远程csv访问选定行-从tfjs-examples-csv-data-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-12从远程csv访问选定行-从tfjs-examples-csv-data-index-js"}},[t._v("#")]),t._v(" 清单6.12从远程CSV访问选定行：从tfjs-examples/CSV data/index.js")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'queryURL'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sampleIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'whichSampleInput'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valueAsNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("csv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" myData\n                           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("skip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampleIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs something like: [{crim: 0.3237, zn: 0, indus: 2.18, ..., tax: 222, ptratio: 18.7, lstat: 2.94}]")]),t._v("\n  #For Boston Housing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("现在我们获取到行的输出，从清单6.12中的console.log的输出中得到，它以对象的形式将列名映射到值，并将其规范化插入到文档中。需要注意的是：如果我们获取一个不存在的行，比如获取只有300元素数据集的第400个元素，那么我们最终将得到一个空数组。\n当连接到远程数据集时，使用错误的URL是很常见的。在这种情况下，最好捕获错误并向用户提供合理的错误消息。由于dataset在获取数据之前不会与远程资源关联，因此必须注意在正确的位置编写错误处理。代码清单6.13显示了在我们的CSV示例web app中如何处理错误的一小段代码。")]),t._v(" "),a("h6",{attrs:{id:"清单6-13处理因连接失败而产生的错误-从tfjs-examples-csv-data-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-13处理因连接失败而产生的错误-从tfjs-examples-csv-data-index-js"}},[t._v("#")]),t._v(" 清单6.13处理因连接失败而产生的错误：从tfjs-examples/csv data/index.js")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://some.bad.url'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sampleIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'whichSampleInput'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valueAsNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("csv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" columnNames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     columnNames "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" myData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("columnNames")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     ui"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateColumnNamesMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Could not connect to ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在第6.3节中，我们学习了如何使用 model.fitDataset()。该方法需要一个特定形式的数据集。其需要两个属性的对象{xs, ys}，其中xs是表示输入的张量，ys表示关联目标的张量。默认情况下，CSV数据集将以JS对象的形式返回，我们也可以配置数据集使其更接近训练所需的元素。我们需要使用tf.data.csv（）的csvConfig.columnConfigs字段。比如一个CSV文件，它有三列，“俱乐部”、“实力”、“距离”。如果我们希望预测俱乐部的物理距离以及实力，可以在原始输出上应用一个map函数，将字段排列成xs和ys，或者，我们可以配置CSV来完成这项工作。表6.4显示了如何配置CSV数据集以分离特征和标签属性并执行批处理，以便输出适合model.fitDataset()\n的输入。")]),t._v(" "),a("h6",{attrs:{id:"表6-4配置csv数据集使用model-fitdataset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表6-4配置csv数据集使用model-fitdataset"}},[t._v("#")]),t._v(" 表6.4配置CSV数据集使用model.fitDataset")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据集创建")]),t._v(" "),a("th",[t._v("代码")]),t._v(" "),a("th",[t._v("dataset.take(1).toArray()[0]结论")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("默认csv")]),t._v(" "),a("td",[t._v("dataset = tf.data.csv(csvURL)")]),t._v(" "),a("td",[t._v("{club: 1, strength: 45,")])]),t._v(" "),a("tr",[a("td",[t._v("distance: 200}")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("使用columnConfigs参数")]),t._v(" "),a("td",[t._v("columnConfigs = {distance: {isLabel: true}};dataset = tf.data.csv(csvURL, {columnConfigs});")]),t._v(" "),a("td",[t._v("{xs: {club: 1, strength: 45}, ys: {distance: 200}}")])]),t._v(" "),a("tr",[a("td",[t._v("使用columnConfigs参数后分批")]),t._v(" "),a("td",[t._v("columnConfigs = {distance: {isLabel: true}}；dataset = tf.data.csv(csvURL, {columnConfigs}).batch(128);")]),t._v(" "),a("td",[t._v("[xs: {club: Tensor, strength: Tensor},ys: {distance:Tensor}](每一个张量形状 [128])")])]),t._v(" "),a("tr",[a("td",[t._v("使用columnConfigs参数后分批并将对象转化成数组")]),t._v(" "),a("td",[t._v("columnConfigs = {distance: {isLabel: true}};dataset = tf.data.csv(csvURL, {columnConfigs}).map(({xs, ys}) =>{return {xs:Object.values(xs), ys:Object.values(ys)}; }).batch(128);")]),t._v(" "),a("td",[t._v("{xs: Tensor, ys: Tensor}；其中{xs: [number, number], ys: [number]}的格式")])])])]),t._v(" "),a("h6",{attrs:{id:"信息6-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信息6-1"}},[t._v("#")]),t._v(" 信息6.1")]),t._v(" "),a("p",[t._v("上述例子通过远程url得到可用数据集，获取方法可以在浏览器和Node.js执行。Tf.dada.csv的API同样允许我们在请求中添加参数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://path/to/your/private.csv'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" requestInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("API_KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdef123456789'")]),t._v("\n  requestInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Authorization'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("API_KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myDataset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("csv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("requestInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"_6-4-2使用tf-data-webcam访问视频数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-2使用tf-data-webcam访问视频数据"}},[t._v("#")]),t._v(" 6.4.2使用tf.data.webcam访问视频数据")]),t._v(" "),a("p",[t._v("TensorFlow.js项目最令人兴奋的应用之一是训练ML模型并将其应用于移动设备上。使用移动车载加速计进行运动识别？使用车载麦克风进行声音或语音识别？使用车载摄像头进行视觉辅助？我们才刚刚开始。\n在第5章中，我们探讨了在迁移学习的背景下使用网络摄像头和麦克风。我们看到了如何使用相机来控制吃豆人的游戏，我们使用麦克风来微调一个语音识别系统。虽然并不是所有的都可以使用一个方便的API进行调用，但tf.data确实有一个简单易用的API来处理网络摄像头。让我们来探索它是如何工作的，以及如何使用它从训练过的模型中进行预测。\n有了这个tf.data API，创建一个数据集非常简单，它可以从网络摄像头生成一个图像流。清单6.14展示了一个基本示例。我们首先注意到的是对tf.data.webcam()的调用。如果在Node.js环境中调用此API，或者没有可用的网络摄像头，那么将抛出一个异常，指示错误的来源。浏览器在打开网络摄像头之前需要得到用户的许可。如果被拒绝，构造函数也将引发异常。")]),t._v(" "),a("h6",{attrs:{id:"清单6-14使用tf-data-webcam和html元素创建基本的网络摄像头数据集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-14使用tf-data-webcam和html元素创建基本的网络摄像头数据集"}},[t._v("#")]),t._v(" 清单6.14使用tf.data.webcam和HTML元素创建基本的网络摄像头数据集")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" videoElement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'video'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvideoElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvideoElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webcam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("webcam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("videoElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" img "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" webcam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("capture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nimg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwebcam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("创建摄像机构造函数时，必须知道要生成的张量的形状。有两种方法可以实现。第一种方法，如清单6.14所示，使用提供的HTML元素的形状。如果需要改变形状，或者不显示视频，则可以通过配置对象提供所需的形状，如清单6.15所示。注意，提供的HTML元素参数是未定义的，这意味着API将在DOM中创建一个隐藏的元素来充当视频。")]),t._v(" "),a("h6",{attrs:{id:"清单6-15使用配置对象创建基本网络摄像头数据集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-15使用配置对象创建基本网络摄像头数据集"}},[t._v("#")]),t._v(" 清单6.15使用配置对象创建基本网络摄像头数据集")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" videoElement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webcamConfig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("facingMode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resizeWidth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resizeHeight"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webcam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("webcam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("videoElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" webcamConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("也可以使用配置对象裁剪视频流的部分并调整其大小。通过使用HTML元素和配置对象，API允许调用者指定要裁剪的位置和所需的输出大小。请参见清单6.16中的示例，该示例选择一个正方形视频的矩形部分，然后减小大小以适合一个小模型。")]),t._v(" "),a("h6",{attrs:{id:"清单6-16从网络摄像机裁剪和调整数据大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-16从网络摄像机裁剪和调整数据大小"}},[t._v("#")]),t._v(" 清单6.16从网络摄像机裁剪和调整数据大小")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" videoElement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'video'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n videoElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n videoElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webcamConfig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     resizeWidth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     resizeHeight"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     centerCrop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webcam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("webcam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("videoElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" webcamConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("无论它们的绘制速度有多快或有多慢，都将按顺序生成一行一行的数据集。可以从网络摄像机中提取想要的很多的样本。API调用方在处理完流后必须显式地告诉流结束。\n使用capture（）方法从网络摄像机迭代器访问数据，该方法返回表示最近帧的张量。API用户应该在其ML工作中使用这个张量，但要防止内存泄漏。由于网络摄像头数据的异步处理涉及到复杂的问题，最好直接对捕获的帧应用必要的预处理功能，而不是使用tf.data提供的deferred map（）功能。\n也就是说，不是使用data.map处理数据，")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// No:")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" webcam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" tfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("webcam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     webcam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" webcam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myProcessingFunction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" imgTensor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" webcam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("capture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use imgTensor here.")]),t._v("\n     tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imgTensor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("将函数直接应用于图像。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Yes:")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" webcam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" tfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("webcam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" imgTensor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPreprocessingFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("webcam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("capture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use imgTensor here.")]),t._v("\n     tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imgTensor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("forEach() 和toArray()方法不应在网络摄像机迭代器上使用。为了处理来自设备的长帧序列，tf.data.webcam  API的用户应该自定义自己的循环，例如，tf.nextFrame()以及以合理的帧速率调用capture()。原因是，如果您要调用网络摄像头的forEach()，那么框架将以浏览器的JavaScript引擎请求的速度绘制帧。这通常会比设备的帧速率更快地创建张量，从而导致重复帧和浪费计算。出于类似的原因，不应将网络摄像机迭代器作为参数传递给该 model.fit()方法。\n清单6.17显示了我们在第5章中看到的（Pac Man）示例中的简化预测循环。请注意，只要isPredicting为true（由ui元素控制），外部循环将继续。在内部，循环的速率由调用tf.nextFrame()控制，该调用被固定到UI的刷新速率。")]),t._v(" "),a("h6",{attrs:{id:"清单6-17在预测循环中使用tf-data-webcam-来自tf-js-examples-webcam-transfer-learning-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-17在预测循环中使用tf-data-webcam-来自tf-js-examples-webcam-transfer-learning-index-js"}},[t._v("#")]),t._v(" 清单6.17在预测循环中使用tf.data.webcam（来自tf js-examples/webcam transfer learning/index.js）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("```js\n")])])]),a("p",[t._v("async function getImage() {\nreturn (await webcam.capture())\n.expandDims(0)\n.toFloat()\n.div(tf.scalar(127))\n.sub(tf.scalar(1));")]),t._v(" "),a("p",[t._v("while (isPredicting) {\nconst img = await getImage();")]),t._v(" "),a("p",[t._v("const predictedClass = tf.tidy(() => {\n#Capture the frame from the webcam.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" // Process the image and make predictions...\n  ...\n\n await tf.nextFrame();\n")])])]),a("p",[t._v("}")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("使用网络摄像头时，在预测之前，通常最好先绘制、处理和丢弃图像。首先，通过模型传递图像可以确保相关的模型权重已加载到GPU中，从而防止启动时出现任何断断续续的缓慢情况。其次，这给了摄像头硬件时间来预热并开始发送实际帧。根据硬件的不同，有时网络摄像头会在设备通电时发送空白帧。请参见清单6.18中的一个片段，该片段显示了如何在webcam transfer学习示例中完成此操作。\n###### 清单6.18从tf.data.webcam（）创建视频数据集\n```js\nasync function init() {\n   try {\n     webcam = await tfd.webcam(document.getElementById('webcam'));\n   } catch (e) {\n     console.log(e);\n     document.getElementById('no-webcam').style.display = 'block';\n   }\n   truncatedMobileNet = await loadTruncatedMobileNet();\n  \n   ui.init();\n  \n   // Warm up the model. This uploads weights to the GPU and compiles the WebGL\n   // programs so the first time we collect data from the webcam it will be\n   // quick.\n   const screenShot = await webcam.capture();\n   truncatedMobileNet.predict(screenShot.expandDims(0));\n   screenShot.dispose();\n }\n")])])]),a("h3",{attrs:{id:"_6-4-3使用tf-data-microphone访问音频数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-3使用tf-data-microphone访问音频数据"}},[t._v("#")]),t._v(" 6.4.3使用tf.data.microphone访问音频数据")]),t._v(" "),a("p",[t._v("除了图像数据，tf.data还包括从设备麦克风收集音频数据进行处理。与网络摄像头API类似，麦克风api创建了一个延迟迭代器，允许调用者根据需要请求帧，并将其整齐地打包为适合直接使用到模型中的张量。这里主要是收集用于预测的帧。虽然在技术上可以使用这个API生成一个训练流，但是将它与标签压缩在一起将是一个挑战。\n清单6.19展示了一个如何使用tf.data.microphone  API收集一秒音频数据的示例。请注意，执行此代码将触发浏览器请求用户授予对麦克风的访问权限。")]),t._v(" "),a("h6",{attrs:{id:"清单6-19使用tf-data-microphone-api收集一秒钟的音频数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清单6-19使用tf-data-microphone-api收集一秒钟的音频数据"}},[t._v("#")]),t._v(" 清单6.19使用tf.data.microphone  api收集一秒钟的音频数据")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mic "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("microphone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   fftSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n   columnTruncateLength"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("232")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   numFramesPerSpectrogram"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   sampleRateHz"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("44100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   smoothingTimeConstant"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   includeSpectrogram"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n   includeWaveform"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" audioData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" mic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("capture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" spectrogramTensor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" audioData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("spectrogram"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" waveformTensor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" audioData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("waveform"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n mic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("麦克风包括许多可配置参数，使用户可以精细控制如何将快速傅立叶变换（FFT）应用于音频数据。每个频谱图可以有更多或更少的音频数据帧，或者用户可能只获取特定频率范围。上述字段具有以下含义：")]),t._v(" "),a("ul",[a("li",[t._v("采样频率：44100")]),t._v(" "),a("li",[t._v("麦克风波形的采样率。必须正好是44100或48000，并且必须与设备本身指定的速率匹配。如果指定的值与设备提供的值不匹配，它将引发错误。")]),t._v(" "),a("li",[t._v("fftSize：1024")]),t._v(" "),a("li",[t._v("控制用于计算音频的每个非重叠帧的采样数。")]),t._v(" "),a("li",[t._v("必须是介于16和8192之间的两个值。1024表示在大约1024个样本范围内计算频带的值。")]),t._v(" "),a("li",[t._v("注意，最高可测量频率等于采样率的一半，或约22kHZ")]),t._v(" "),a("li",[t._v("列截断长度：232")]),t._v(" "),a("li",[t._v("控制保留的频率大小。默认情况下，每个音频帧包含fftsize，在我们的例子中是1024，从0到最大（22kHZ）的整个频谱。然而，我们通常只对较低的频率感兴趣。人类的语音一般只有5千赫兹，因此我们只把数据中代表0到5千赫兹的部分。")]),t._v(" "),a("li",[t._v("232 = (5kHz / 22kHz) * 1024\nnumFramesPerSpectrogram: 43")]),t._v(" "),a("li",[t._v("在音频样本上计算FFT以创建频谱图。返回的光谱图的形状需要是[numFramesPerSpectrogram, fftSize, 1]或者 [43, 232, 1]")]),t._v(" "),a("li",[t._v("每帧的持续时间等于sampleRate / fftSize。在我们的例子中，44kHz * 1024大约是0.023秒。")]),t._v(" "),a("li",[t._v("帧之间没有延迟，所以整个谱图持续时间43 * 0.023 = 0.98大约一秒钟。")]),t._v(" "),a("li",[t._v("smoothingTimeConstant: 0")]),t._v(" "),a("li",[t._v("前一帧的数据与此帧混合的程度。必须介于0和1之间。")]),t._v(" "),a("li",[t._v("includeSpectogram: True")]),t._v(" "),a("li",[t._v("includeSpectogram为true，谱图将被计算并作为张量提供。如果应用程序不需要计算谱图，则将此设置为false。")]),t._v(" "),a("li",[t._v("includeWaveform: True")]),t._v(" "),a("li",[t._v("includeWaveform为True，波形将保持并可用作张量。如果调用者不需要波形，则可以将其设置为false。请注意,includeSpectogram和includeWaveform中至少有一个必须为真。如果它们都是假的，那就是错误。这两个选项中只有一个是必需的。")]),t._v(" "),a("li",[t._v("与视频流类似，音频流有时需要一些时间才能启动，而来自设备的数据可能在开始时是无意义的。通常会遇到零和无穷大。最好的解决方案是通过丢弃前几个样本，使麦克风“预热”一小段时间，直到数据不再损坏。通常200毫秒的数据足以开始获取干净的样本。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);