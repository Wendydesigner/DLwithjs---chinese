(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{464:function(t,s,l){"use strict";l.r(s);var o=l(28),e=Object(o.a)({},(function(){var t=this,s=t.$createElement,l=t._self._c||s;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"tensorflow-js-中线性回归"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow-js-中线性回归"}},[t._v("#")]),t._v(" Tensorflow.js 中线性回归")]),t._v(" "),l("div",{staticClass:"tip custom-block"},[l("p",{staticClass:"custom-block-title"},[t._v("内容包括：")]),t._v(" "),l("ul",[l("li",[t._v("基本神经网络实力，用于线性回归的简单机器学习任务")]),t._v(" "),l("li",[t._v("张量和张量运算")]),t._v(" "),l("li",[t._v("基本的神经网络优化")])])]),t._v(" "),l("p",[t._v("复制代码没有人喜欢等待，当我们不知道要等多久的时候，等待特别烦人。任何用户体验设计师都会告诉你，如果你无法解决延迟，那么最好就是给用户一个可靠的等待估计时间。估计延迟时间是一个预测问题，TensorFlow.js 库可以根据上下文和用户情况，构建准确下载时间的预测，使我们能够为用户提供更清晰、可靠的体验。\n在本章中，我们将以一个简单的下载时间预测问题为例，介绍一个完整的机器学习模型的主要组成部分。我们将从实用的角度讨论张量、建模和优化。我们将介绍它们是什么、如何工作以及如何恰当地使用它们。")]),t._v(" "),l("p",[t._v("一个专注的研究者需要多年的研究才能完全理解深度学习的内部原理，其需要熟悉许多数学科目。然而，对于深度学习的实践者来说，拥有线性代数、微分学和高维空间统计的专业知识是有帮助的，但不是必要的，甚至对于构建复杂的高性能系统也是如此。我们在这一章，以及在这本书中的目标是，在可能的情况下，使用代码而不是数学符号来介绍必要的技术主题。我们的目标是传达对机器及其用途的直观理解，而不需要领域专业知识。")])])}),[],!1,null,null,null);s.default=e.exports}}]);